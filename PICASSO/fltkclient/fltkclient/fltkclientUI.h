// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef fltkclientUI_h
#define fltkclientUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "client.h"
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Check_Button.H>

class fltkClientUI {
public:
  fltkClientUI();
private:
  Fl_Double_Window *CDASClient;
  Fl_Tabs *Tabs;
public:
  Fl_Group *Command;
  Fl_Group *ServerInfo;
  Fl_Input *Address;
  Fl_Input *Port;
  Fl_Button *Connect;
private:
  void cb_Connect_i(Fl_Button*, void*);
  static void cb_Connect(Fl_Button*, void*);
public:
  Fl_Button *KillServer;
private:
  void cb_KillServer_i(Fl_Button*, void*);
  static void cb_KillServer(Fl_Button*, void*);
public:
  Fl_Group *Camera;
  Fl_Return_Button *SendCamera;
private:
  void cb_SendCamera_i(Fl_Return_Button*, void*);
  static void cb_SendCamera(Fl_Return_Button*, void*);
public:
  Fl_Output *CameraOutput;
  Fl_Group *CCDSize;
  Fl_Input *CCDTop;
  Fl_Input *CCDLeft;
  Fl_Input *CCDHeight;
  Fl_Input *CCDWidth;
  Fl_Round_Button *CCDHigh;
private:
  void cb_CCDHigh_i(Fl_Round_Button*, void*);
  static void cb_CCDHigh(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *CCDMed;
private:
  void cb_CCDMed_i(Fl_Round_Button*, void*);
  static void cb_CCDMed(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *CCDLow;
private:
  void cb_CCDLow_i(Fl_Round_Button*, void*);
  static void cb_CCDLow(Fl_Round_Button*, void*);
public:
  Fl_Choice *CameraType;
  Fl_Input *CCDTemp;
  Fl_Input *CCDGain;
  Fl_Check_Button *DoAutoTemperature;
  Fl_Choice *FilterWheelType;
  Fl_Return_Button *SendFilterWheel;
private:
  void cb_SendFilterWheel_i(Fl_Return_Button*, void*);
  static void cb_SendFilterWheel(Fl_Return_Button*, void*);
public:
  Fl_Output *FilterWheelOutput;
  Fl_Input *Name1;
  Fl_Input *Name2;
  Fl_Input *Name3;
  Fl_Input *Name4;
  Fl_Input *Name5;
  Fl_Input *Name6;
  Fl_Input *Height1;
  Fl_Input *Height2;
  Fl_Input *Height3;
  Fl_Input *Height4;
  Fl_Input *Height5;
  Fl_Input *Height6;
  Fl_Input *Exp1;
  Fl_Input *Exp2;
  Fl_Input *Exp3;
  Fl_Input *Exp4;
  Fl_Input *Exp5;
  Fl_Input *Exp6;
  Fl_Round_Button *Shutter1;
private:
  void cb_Shutter1_i(Fl_Round_Button*, void*);
  static void cb_Shutter1(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Shutter2;
private:
  void cb_Shutter2_i(Fl_Round_Button*, void*);
  static void cb_Shutter2(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Shutter3;
private:
  void cb_Shutter3_i(Fl_Round_Button*, void*);
  static void cb_Shutter3(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Shutter4;
private:
  void cb_Shutter4_i(Fl_Round_Button*, void*);
  static void cb_Shutter4(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Shutter5;
private:
  void cb_Shutter5_i(Fl_Round_Button*, void*);
  static void cb_Shutter5(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Shutter6;
private:
  void cb_Shutter6_i(Fl_Round_Button*, void*);
  static void cb_Shutter6(Fl_Round_Button*, void*);
public:
  Fl_Input *NumFilters;
  Fl_Check_Button *DoDark;
private:
  void cb_DoDark_i(Fl_Check_Button*, void*);
  static void cb_DoDark(Fl_Check_Button*, void*);
public:
  Fl_Input *DarkFrequency;
  Fl_Input *DarkExpTime;
  Fl_Return_Button *SendSequence;
private:
  void cb_SendSequence_i(Fl_Return_Button*, void*);
  static void cb_SendSequence(Fl_Return_Button*, void*);
public:
  Fl_Output *SequenceOutput;
  Fl_Check_Button *DoPeriodicity;
private:
  void cb_DoPeriodicity_i(Fl_Check_Button*, void*);
  static void cb_DoPeriodicity(Fl_Check_Button*, void*);
public:
  Fl_Input *PeriodicityFrequency;
  Fl_Input *Seq1_1;
  Fl_Input *Seq1_2;
  Fl_Input *Seq1_3;
  Fl_Input *Seq1_4;
  Fl_Input *Seq1_5;
  Fl_Input *Seq1_6;
  Fl_Input *Seq1_7;
  Fl_Input *Seq1_8;
  Fl_Input *Seq1_9;
  Fl_Input *Seq1_10;
  Fl_Input *Seq2_1;
  Fl_Input *Seq2_2;
  Fl_Input *Seq2_3;
  Fl_Input *Seq2_4;
  Fl_Input *Seq2_5;
  Fl_Input *Seq2_6;
  Fl_Input *Seq2_7;
  Fl_Input *Seq2_8;
  Fl_Input *Seq2_9;
  Fl_Input *Seq2_10;
  Fl_Input *Seq3_1;
  Fl_Input *Seq3_2;
  Fl_Input *Seq3_3;
  Fl_Input *Seq3_4;
  Fl_Input *Seq3_5;
  Fl_Input *Seq3_6;
  Fl_Input *Seq3_7;
  Fl_Input *Seq3_8;
  Fl_Input *Seq3_9;
  Fl_Input *Seq3_10;
  Fl_Input *Seq4_1;
  Fl_Input *Seq4_2;
  Fl_Input *Seq4_3;
  Fl_Input *Seq4_4;
  Fl_Input *Seq4_5;
  Fl_Input *Seq4_6;
  Fl_Input *Seq4_7;
  Fl_Input *Seq4_8;
  Fl_Input *Seq4_9;
  Fl_Input *Seq4_10;
  Fl_Input *Seq1;
  Fl_Input *Seq2;
  Fl_Input *Seq3;
  Fl_Input *Seq4;
  Fl_Input *Seq5;
  Fl_Input *DataDir;
  Fl_Input *PNGDir;
  Fl_Check_Button *DoPNG;
  Fl_Input *MPGDir;
  Fl_Check_Button *DoMPG;
  Fl_Input *QLDir;
  Fl_Check_Button *DoQL;
  Fl_Input *DirectoryOutput;
  Fl_Return_Button *SendDirectory;
private:
  void cb_SendDirectory_i(Fl_Return_Button*, void*);
  static void cb_SendDirectory(Fl_Return_Button*, void*);
public:
  Fl_Group *Site;
  Fl_Input *SiteName;
  Fl_Input *SiteAbbreviation;
  Fl_Return_Button *SendSite;
private:
  void cb_SendSite_i(Fl_Return_Button*, void*);
  static void cb_SendSite(Fl_Return_Button*, void*);
public:
  Fl_Input *Latitude;
  Fl_Input *Longitude;
  Fl_Input *Altitude;
  Fl_Output *SiteOutput;
  Fl_Group *Schedule;
  Fl_Group *Modes;
  Fl_Round_Button *Off;
private:
  void cb_Off_i(Fl_Round_Button*, void*);
  static void cb_Off(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Auto;
private:
  void cb_Auto_i(Fl_Round_Button*, void*);
  static void cb_Auto(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *Manual;
private:
  void cb_Manual_i(Fl_Round_Button*, void*);
  static void cb_Manual(Fl_Round_Button*, void*);
public:
  Fl_Input *Start;
  Fl_Input *Stop;
  Fl_Group *Horizon;
  Fl_Input *SunAngle;
  Fl_Input *MoonAngle;
  Fl_Round_Button *DoMoonAngle;
private:
  void cb_DoMoonAngle_i(Fl_Round_Button*, void*);
  static void cb_DoMoonAngle(Fl_Round_Button*, void*);
public:
  Fl_Return_Button *SendSchd;
private:
  void cb_SendSchd_i(Fl_Return_Button*, void*);
  static void cb_SendSchd(Fl_Return_Button*, void*);
public:
  Fl_Output *SchdOutput;
  Fl_Check_Button *AlternateSite;
private:
  void cb_AlternateSite_i(Fl_Check_Button*, void*);
  static void cb_AlternateSite(Fl_Check_Button*, void*);
public:
  Fl_Input *AlternateLatitude;
  Fl_Input *AlternateLongitude;
  Fl_Group *Capture;
  Fl_Input *ExpTime;
  Fl_Check_Button *Dark;
  Fl_Input *Stub;
  Fl_Return_Button *CaptureNow;
private:
  void cb_CaptureNow_i(Fl_Return_Button*, void*);
  static void cb_CaptureNow(Fl_Return_Button*, void*);
public:
  Fl_Output *CaptureOutput;
  Fl_Check_Button *SavePNG;
  Fl_Input *Filter;
  Fl_Group *Advanced;
  Fl_Input *InputText;
  Fl_Return_Button *SendCmd;
private:
  void cb_SendCmd_i(Fl_Return_Button*, void*);
  static void cb_SendCmd(Fl_Return_Button*, void*);
public:
  Fl_Output *OutputText;
  void show(int argc, char **argv);
private:
  Client myClient; 
  bool myMoonSet; 
  int myScheduleMode; 
  double myMoonAngle; 
  double mySunAngle; 
  time_t myStartTime; 
  time_t myStopTime; 
  string mySiteName; 
  string mySiteAbbreviation; 
  double myLatitude; 
  double myLongitude; 
  double myAltitude; 
  int myCCDBinning; 
  int myCCDTop; 
  int myCCDLeft; 
  int myCCDHeight; 
  int myCCDWidth; 
  double myCCDTemp; 
  int myCameraType; 
  string myDataDir; 
  string myPNGDir; 
  string myMPGDir; 
  string myQLDir; 
  bool myDoPNG; 
  bool myDoMPG; 
  bool myDoQL; 
  int myFilterWheelType; 
  int myCCDGain; 
  bool myDoAutoTemperature; 
  double myAlternateLatitude; 
  double myAlternateLongitude; 
  int myNumFilters; 
};
#endif
