function output = ge_radarbeam(lat,lon,az,el,bw,height,data,c_lim,timestamp_0,timestamp_1)
%
% Create the kml output for a radar beam in Google earth.
%
% INPUTS
%   lat - the latitude of the radar site [-90...90]
%   lon - the longitude of the radar site [0...360]
%   az - the azimuth of the radar beam [0...360]
%   el - the elevation of the radar beam [0...90]
%   bw - the beamwidth of the radar beam [0...90]
%   height - the height at each step along the radar beam (1xN) [km]
%   data - the data (SNR, velocity) to plot at each step (1xN)
%   c_lim - [min, max] defining the range of values to stretch the data
%           between
%   timestamp_0 - the timestamp of the beginning of the data in 
%   yyyy-mm-ddThh:mm:sszzzzzz format.  This is a string.
%   timestamp_1 - the timestamp of the end of the data in 
%   yyyy-mm-ddThh:mm:sszzzzzz format.  This is a string.
%   filename - the filename for the png image created.  This is a string.
%
% OUTPUTS
%   output - the kml data for the image.  Call ge_output to write this to a
%   file.

while(lon > 180)
    lon = lon - 360;
end

    % find the height difference at each step
    dh = height(2:end)-height(1:end-1);

    % find the intermediate heights in between each original height step
    h = (height(1:end-1) + dh./2);
    
    % calculate the ranges
    r = h./sin(el*pi/180.);
    
    % calculate the delta in lat/lon at each altitude
    del = r.*tan(bw*pi/180)/111;    % in degrees assuming 111 km/deg
    

    % Find the lat/lon of each point along the radar beam
    [b_lat, b_lon] = cnv_azel2latlon(az.*ones(size(h)),el.*ones(size(h)),h,[lat,lon]);
    [lat0,lon0] = cnv_azel2latlon(az,el,height(1),[lat,lon]);

    colors = colormap('jet');
    n = size(colors,1)-1;

    % Creat the output variable
    output = '';

    if(isfinite(data(1)))

        % Figure out the color based on the color limits
        ind = round((data(1)-c_lim(1))/(c_lim(2)-c_lim(1))*n)+1;
        if(ind > n)
            ind = n;
        elseif(ind < 1)
            ind = 1;
        end

        [r,g,b] = rgbconv(colors(ind,:));

        % Create the first voxel by hand
        output = ['<Placemark>\n',...
            '<TimeSpan>\n',...
          '    <begin>',timestamp_0,'</begin>\n',...
          '    <end>',timestamp_1,'</end>\n',...
          '  </TimeSpan>\n',...
            '<Style><PolyStyle>\n',...
            sprintf('<color>ff%s%s%s</color> \n',b,g,r),...
            '<colorMode>normal</colorMode>\n',...
            '<fill>1</fill>\n',...
            '<outline>0</outline>\n',...
            '</PolyStyle></Style>\n',...
            '<MultiGeometry>',...
            '<Polygon>\n',...
            '<altitudeMode>\n',...
            'absolute\n',...
            '</altitudeMode>\n',...
            '<outerBoundaryIs>\n',...
            '<LinearRing>\n',...
            '<coordinates>\n',...
            sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
            lon0-del(1),lat0-del(1),height(1)*1e3,b_lon(1)-del(1),b_lat(1)-del(1),h(1)*1e3,...
            b_lon(1)-del(1),b_lat(1)+del(1),h(1)*1e3, lon0-del(1),lat0+del(1),height(1)*1e3,...
            lon0-del(1),lat0-del(1),height(1)*1e3),...
            '</coordinates>\n',...
            '</LinearRing>\n',...
            '</outerBoundaryIs>\n',...
            '</Polygon>\n'];

        output = [output,'<Polygon id="poly_default_box">\n',...
            '<altitudeMode>\n',...
            'absolute\n',...
            '</altitudeMode>\n',...
            '<outerBoundaryIs>\n',...
            '<LinearRing>\n',...
            '<coordinates>\n',...
            sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
            lon0-del(1),lat0-del(1),height(1)*1e3,b_lon(1)-del(1),b_lat(1)-del(1),h(1)*1e3,...
            b_lon(1)+del(1),b_lat(1)-del(1),h(1)*1e3, lon0+del(1),lat0-del(1),height(1)*1e3,...
            lon0-del(1),lat0-del(1),height(1)*1e3),...
            '</coordinates>\n',...
            '</LinearRing>\n',...
            '</outerBoundaryIs>\n',...
            '</Polygon>\n'];

        output = [output,'<Polygon id="poly_default_box">\n',...
            '<altitudeMode>\n',...
            'absolute\n',...
            '</altitudeMode>\n',...
            '<outerBoundaryIs>\n',...
            '<LinearRing>\n',...
            '<coordinates>\n',...
            sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
            lon0+del(1),lat0-del(1),height(1)*1e3,b_lon(1)+del(1),b_lat(1)-del(1),h(1)*1e3,...
            b_lon(1)+del(1),b_lat(1)+del(1),h(1)*1e3, lon0+del(1),lat0+del(1),height(1)*1e3,...
            lon0+del(1),lat0-del(1),height(1)*1e3),...
            '</coordinates>\n',...
            '</LinearRing>\n',...
            '</outerBoundaryIs>\n',...
            '</Polygon>\n'];

        output = [output,'<Polygon id="poly_default_box">\n',...
            '<altitudeMode>\n',...
            'absolute\n',...
            '</altitudeMode>\n',...
            '<outerBoundaryIs>\n',...
            '<LinearRing>\n',...
            '<coordinates>\n',...
            sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
            lon0+del(1),lat0+del(1),height(1)*1e3,b_lon(1)+del(1),b_lat(1)+del(1),h(1)*1e3,...
            b_lon(1)-del(1),b_lat(1)+del(1),h(1)*1e3, lon0-del(1),lat0+del(1),height(1)*1e3,...
            lon0+del(1),lat0+del(1),height(1)*1e3),...
            '</coordinates>\n',...
            '</LinearRing>\n',...
            '</outerBoundaryIs>\n',...
            '</Polygon>\n',...
            '</MultiGeometry>',...
            '</Placemark>\n'];
    end

    for i = 1:(length(h)-1)
        % Only create polygon if there is data
        if(isfinite(data(i+1)))


            % Figure out the color based on the color limits
            ind = round((data(i+1)-c_lim(1))/(c_lim(2)-c_lim(1))*n)+1;
            if(ind > n)
                ind = n;
            elseif(ind < 1)
                ind = 1;
            end
            [r,g,b] = rgbconv(colors(ind,:));

            output = [output,'<Placemark id="radar beam">\n',...
            '<TimeSpan>\n',...
          '    <begin>',timestamp_0,'</begin>\n',...
          '    <end>',timestamp_1,'</end>\n',...
          '  </TimeSpan>\n',...
                '<Style><PolyStyle>\n',...
                sprintf('<color>ff%s%s%s</color> \n',b,g,r),...
                '<colorMode>normal</colorMode>\n',...
                '<fill>1</fill>\n',...
                '<outline>0</outline>\n',...
                '</PolyStyle></Style>\n',...
                '<MultiGeometry>',...
                '<Polygon id="poly_default_box">\n',...
                '<altitudeMode>\n',...
                'absolute\n',...
                '</altitudeMode>\n',...
                '<outerBoundaryIs>\n',...
                '<LinearRing>\n',...
                '<coordinates>\n',...
                sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
                b_lon(i)-del(i),b_lat(i)-del(i),h(i)*1e3,b_lon(i+1)-del(i+1),b_lat(i+1)-del(i+1),h(i+1)*1e3,...
                b_lon(i+1)-del(i+1),b_lat(i+1)+del(i+1),h(i+1)*1e3, b_lon(i)-del(i),b_lat(i)+del(i),h(i)*1e3,...
                b_lon(i)-del(i),b_lat(i)-del(i),h(i)*1e3),...
                '</coordinates>\n',...
                '</LinearRing>\n',...
                '</outerBoundaryIs>\n',...
                '</Polygon>\n'];

            output = [output,'<Polygon id="poly_default_box">\n',...
                '<altitudeMode>\n',...
                'absolute\n',...
                '</altitudeMode>\n',...
                '<outerBoundaryIs>\n',...
                '<LinearRing>\n',...
                '<coordinates>\n',...
                sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
                b_lon(i)-del(i),b_lat(i)-del(i),h(i)*1e3,b_lon(i+1)-del(i+1),b_lat(i+1)-del(i+1),h(i+1)*1e3,...
                b_lon(i+1)+del(i+1),b_lat(i+1)-del(i+1),h(i+1)*1e3, b_lon(i)+del(i),b_lat(i)-del(i),h(i)*1e3,...
                b_lon(i)-del(i),b_lat(i)-del(i),h(i)*1e3),...
                '</coordinates>\n',...
                '</LinearRing>\n',...
                '</outerBoundaryIs>\n',...
                '</Polygon>\n'];

            output = [output,'<Polygon id="poly_default_box">\n',...
                '<altitudeMode>\n',...
                'absolute\n',...
                '</altitudeMode>\n',...
                '<outerBoundaryIs>\n',...
                '<LinearRing>\n',...
                '<coordinates>\n',...
                sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
                b_lon(i)+del(i),b_lat(i)-del(i),h(i)*1e3,b_lon(i+1)+del(i+1),b_lat(i+1)-del(i+1),h(i+1)*1e3,...
                b_lon(i+1)+del(i+1),b_lat(i+1)+del(i+1),h(i+1)*1e3, b_lon(i)+del(i),b_lat(i)+del(i),h(i)*1e3,...
                b_lon(i)+del(i),b_lat(i)-del(i),h(i)*1e3),...
                '</coordinates>\n',...
                '</LinearRing>\n',...
                '</outerBoundaryIs>\n',...
                '</Polygon>\n'];

            output = [output,'<Polygon id="poly_default_box">\n',...
                '<altitudeMode>\n',...
                'absolute\n',...
                '</altitudeMode>\n',...
                '<outerBoundaryIs>\n',...
                '<LinearRing>\n',...
                '<coordinates>\n',...
                sprintf('%f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f %f,%f,%f ',...
                b_lon(i)+del(i),b_lat(i)+del(i),h(i)*1e3,b_lon(i+1)+del(i+1),b_lat(i+1)+del(i+1),h(i+1)*1e3,...
                b_lon(i+1)-del(i+1),b_lat(i+1)+del(i+1),h(i+1)*1e3, b_lon(i)-del(i),b_lat(i)+del(i),h(i)*1e3,...
                b_lon(i)+del(i),b_lat(i)+del(i),h(i)*1e3),...
                '</coordinates>\n',...
                '</LinearRing>\n',...
                '</outerBoundaryIs>\n',...
                '</Polygon>\n',...
                '</MultiGeometry>',...
                '</Placemark>\n'];
        end
    end

end