// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "fltkclientUI.h"
#include <iostream>
#include <stdlib.h>
#include <sstream>
#include "ServerCommands.h"
#include "schedule.h"
#include <time.h>

void fltkClientUI::cb_Connect_i(Fl_Button*, void*) {
  // Read the address and port info
myClient.myServerAddress = Address->value();
string temp_string;
temp_string = Port->value();
myClient.myServerPort = atoi(temp_string.c_str());

// Get the current values from the server
ostringstream sout;
char *temp;

sout << GET_STARTTIME;
myClient.SendCommand(sout.str());
myStartTime = atoi(myClient.myLastReply.c_str());

sout.str("");
sout << GET_STOPTIME;
myClient.SendCommand(sout.str());
myStopTime = atoi(myClient.myLastReply.c_str());

char time_string[64];
strftime(time_string, 64, "%m/%d/%Y %H:%M:%S", localtime(&myStartTime));
Start->value(time_string);
strftime(time_string, 64, "%m/%d/%Y %H:%M:%S", localtime(&myStopTime));
Stop->value(time_string);

sout.str("");
sout << GET_SCHEDULE_MODE;
myClient.SendCommand(sout.str());

myScheduleMode = atoi(myClient.myLastReply.c_str());

switch(myScheduleMode)
{
  case SCHEDULE_OFF:
    Off->value(1);
    Auto->value(0);
    Manual->value(0);
    Start->deactivate();
    Stop->deactivate();
    break;
  case SCHEDULE_AUTO:
    Auto->value(1);
    Off->value(0);
    Manual->value(0);
    Start->deactivate();
    Stop->deactivate();
    break;
  case SCHEDULE_MANUAL:
    Manual->value(1);
    Off->value(0);
    Auto->value(0);
    Start->activate();
    Stop->activate();
    break;
}

sout.str("");
sout << GET_SUNANGLE;
myClient.SendCommand(sout.str());

mySunAngle = atof(myClient.myLastReply.c_str());
SunAngle->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_MOONANGLE;
myClient.SendCommand(sout.str());

myMoonAngle = atof(myClient.myLastReply.c_str());
MoonAngle->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_DOMOONSET;
myClient.SendCommand(sout.str());

myMoonSet = (bool) atoi(myClient.myLastReply.c_str());
DoMoonAngle->value(myMoonSet);
if(myMoonSet)
  MoonAngle->activate();
else
  MoonAngle->deactivate();

sout.str("");
sout << GET_SITENAME;
myClient.SendCommand(sout.str());

mySiteName = myClient.myLastReply;
SiteName->value(mySiteName.c_str());

sout.str("");
sout << GET_SITEABBR;
myClient.SendCommand(sout.str());

mySiteAbbreviation = myClient.myLastReply;
SiteAbbreviation->value(mySiteAbbreviation.c_str());

sout.str("");
sout << GET_LATITUDE;
myClient.SendCommand(sout.str());

myLatitude = atof(myClient.myLastReply.c_str());
Latitude->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_LONGITUDE;
myClient.SendCommand(sout.str());

myLongitude = atof(myClient.myLastReply.c_str());
Longitude->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_ALTITUDE;
myClient.SendCommand(sout.str());

myAltitude = atof(myClient.myLastReply.c_str());
Altitude->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_XBIN;
myClient.SendCommand(sout.str());

myCCDBinning = atoi(myClient.myLastReply.c_str());
if(myCCDBinning == 1) 
{
  CCDHigh->value(1);
  CCDMed->value(0);
  CCDLow->value(0);
}
if(myCCDBinning == 2) 
{
  CCDHigh->value(0);
  CCDMed->value(1);
  CCDLow->value(0);
}
if(myCCDBinning == 3) 
{
  CCDHigh->value(0);
  CCDMed->value(0);
  CCDLow->value(1);
}

sout.str("");
sout << GET_TOP;
myClient.SendCommand(sout.str());

myCCDTop = atoi(myClient.myLastReply.c_str());
CCDTop->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_LEFT;
myClient.SendCommand(sout.str());

myCCDLeft = atoi(myClient.myLastReply.c_str());
CCDLeft->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_HEIGHT;
myClient.SendCommand(sout.str());

myCCDHeight = atoi(myClient.myLastReply.c_str());
CCDHeight->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_WIDTH;
myClient.SendCommand(sout.str());

myCCDWidth = atoi(myClient.myLastReply.c_str());
CCDWidth->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_TEMP;
myClient.SendCommand(sout.str());

myCCDTemp = atof(myClient.myLastReply.c_str());
CCDTemp->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_GAIN;
myClient.SendCommand(sout.str());

myCCDGain = atof(myClient.myLastReply.c_str());
CCDGain->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_CCD_AUTO_TEMP;
myClient.SendCommand(sout.str());

myDoAutoTemperature = atoi(myClient.myLastReply.c_str());
DoAutoTemperature->value(myDoAutoTemperature);

sout.str("");
sout << GET_CAMERATYPE;
myClient.SendCommand(sout.str());

myCameraType = atoi(myClient.myLastReply.c_str());
CameraType->value(myCameraType);

sout.str("");
sout << GET_FILTERWHEELTYPE;
myClient.SendCommand(sout.str());

myFilterWheelType = atoi(myClient.myLastReply.c_str());
FilterWheelType->value(myFilterWheelType);

sout.str("");
sout << GET_DATA_DIR;
myClient.SendCommand(sout.str());

myDataDir = myClient.myLastReply;
DataDir->value(myDataDir.c_str());

sout.str("");
sout << GET_PNG_DIR;
myClient.SendCommand(sout.str());

myPNGDir = myClient.myLastReply;
PNGDir->value(myPNGDir.c_str());

sout.str("");
sout << GET_MPG_DIR;
myClient.SendCommand(sout.str());

myMPGDir = myClient.myLastReply;
MPGDir->value(myMPGDir.c_str());

sout.str("");
sout << GET_QL_DIR;
myClient.SendCommand(sout.str());

myQLDir = myClient.myLastReply;
QLDir->value(myQLDir.c_str());

sout.str("");
sout << GET_DO_PNG;
myClient.SendCommand(sout.str());

myDoPNG = atoi(myClient.myLastReply.c_str());
DoPNG->value(myDoPNG);

sout.str("");
sout << GET_DO_MPG;
myClient.SendCommand(sout.str());

myDoMPG = atoi(myClient.myLastReply.c_str());
DoMPG->value(myDoMPG);

sout.str("");
sout << GET_DO_QL;
myClient.SendCommand(sout.str());

myDoQL = atoi(myClient.myLastReply.c_str());
DoQL->value(myDoQL);

// Read the filter information

sout.str("");
sout << GET_NUMFILTERS;
myClient.SendCommand(sout.str());

myNumFilters = atoi(myClient.myLastReply.c_str());
NumFilters->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_FILTERINFO << ":1";
myClient.SendCommand(sout.str());
char tstr[256];
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
Name1->value(temp);
temp = strtok(NULL, ":");
Height1->value(temp);
temp = strtok(NULL, ":");
Exp1->value(temp);
temp = strtok(NULL, ":");
Shutter1->value(atoi(temp));

sout.str("");
sout << GET_FILTERINFO << ":2";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
Name2->value(temp);
temp = strtok(NULL, ":");
Height2->value(temp);
temp = strtok(NULL, ":");
Exp2->value(temp);
temp = strtok(NULL, ":");
Shutter2->value(atoi(temp));

sout.str("");
sout << GET_FILTERINFO << ":3";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
Name3->value(temp);
temp = strtok(NULL, ":");
Height3->value(temp);
temp = strtok(NULL, ":");
Exp3->value(temp);
temp = strtok(NULL, ":");
Shutter3->value(atoi(temp));

sout.str("");
sout << GET_FILTERINFO << ":4";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
Name4->value(temp);
temp = strtok(NULL, ":");
Height4->value(temp);
temp = strtok(NULL, ":");
Exp4->value(temp);
temp = strtok(NULL, ":");
Shutter4->value(atoi(temp));

sout.str("");
sout << GET_FILTERINFO << ":5";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
Name5->value(temp);
temp = strtok(NULL, ":");
Height5->value(temp);
temp = strtok(NULL, ":");
Exp5->value(temp);
temp = strtok(NULL, ":");
Shutter5->value(atoi(temp));

sout.str("");
sout << GET_FILTERINFO << ":6";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
Name6->value(temp);
temp = strtok(NULL, ":");
Height6->value(temp);
temp = strtok(NULL, ":");
Exp6->value(temp);
temp = strtok(NULL, ":");
Shutter6->value(atoi(temp));

// Get the subsequence strings
int num;
sout.str("");
sout << GET_SUBSEQUENCE << ":1";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
num = atoi(temp);
if(num >= 1)
{
   temp = strtok(NULL, ":");
   Seq1_1->value(temp);
}
if(num >= 2)
{
   temp = strtok(NULL, ":");
   Seq1_2->value(temp);
}
if(num >= 3)
{
   temp = strtok(NULL, ":");
   Seq1_3->value(temp);
}
if(num >= 4)
{
   temp = strtok(NULL, ":");
   Seq1_4->value(temp);
}
if(num >= 5)
{
   temp = strtok(NULL, ":");
   Seq1_5->value(temp);
}
if(num >= 6)
{
   temp = strtok(NULL, ":");
   Seq1_6->value(temp);
}
if(num >= 7)
{
   temp = strtok(NULL, ":");
   Seq1_7->value(temp);
}
if(num >= 8)
{
   temp = strtok(NULL, ":");
   Seq1_8->value(temp);
}
if(num >= 9)
{
   temp = strtok(NULL, ":");
   Seq1_9->value(temp);
}
if(num >= 10)
{
   temp = strtok(NULL, ":");
   Seq1_10->value(temp);
}

sout.str("");
sout << GET_SUBSEQUENCE << ":2";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
num = atoi(temp);
if(num >= 1)
{
   temp = strtok(NULL, ":");
   Seq2_1->value(temp);
}
if(num >= 2)
{
   temp = strtok(NULL, ":");
   Seq2_2->value(temp);
}
if(num >= 3)
{
   temp = strtok(NULL, ":");
   Seq2_3->value(temp);
}
if(num >= 4)
{
   temp = strtok(NULL, ":");
   Seq2_4->value(temp);
}
if(num >= 5)
{
   temp = strtok(NULL, ":");
   Seq2_5->value(temp);
}
if(num >= 6)
{
   temp = strtok(NULL, ":");
   Seq2_6->value(temp);
}
if(num >= 7)
{
   temp = strtok(NULL, ":");
   Seq2_7->value(temp);
}
if(num >= 8)
{
   temp = strtok(NULL, ":");
   Seq2_8->value(temp);
}
if(num >= 9)
{
   temp = strtok(NULL, ":");
   Seq2_9->value(temp);
}
if(num >= 10)
{
   temp = strtok(NULL, ":");
   Seq2_10->value(temp);
}

sout.str("");
sout << GET_SUBSEQUENCE << ":3";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
num = atoi(temp);
if(num >= 1)
{
   temp = strtok(NULL, ":");
   Seq3_1->value(temp);
}
if(num >= 2)
{
   temp = strtok(NULL, ":");
   Seq3_2->value(temp);
}
if(num >= 3)
{
   temp = strtok(NULL, ":");
   Seq3_3->value(temp);
}
if(num >= 4)
{
   temp = strtok(NULL, ":");
   Seq3_4->value(temp);
}
if(num >= 5)
{
   temp = strtok(NULL, ":");
   Seq3_5->value(temp);
}
if(num >= 6)
{
   temp = strtok(NULL, ":");
   Seq3_6->value(temp);
}
if(num >= 7)
{
   temp = strtok(NULL, ":");
   Seq3_7->value(temp);
}
if(num >= 8)
{
   temp = strtok(NULL, ":");
   Seq3_8->value(temp);
}
if(num >= 9)
{
   temp = strtok(NULL, ":");
   Seq3_9->value(temp);
}
if(num >= 10)
{
   temp = strtok(NULL, ":");
   Seq3_10->value(temp);
}

sout.str("");
sout << GET_SUBSEQUENCE << ":4";
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
num = atoi(temp);
if(num >= 1)
{
   temp = strtok(NULL, ":");
   Seq4_1->value(temp);
}
if(num >= 2)
{
   temp = strtok(NULL, ":");
   Seq4_2->value(temp);
}
if(num >= 3)
{
   temp = strtok(NULL, ":");
   Seq4_3->value(temp);
}
if(num >= 4)
{
   temp = strtok(NULL, ":");
   Seq4_4->value(temp);
}
if(num >= 5)
{
   temp = strtok(NULL, ":");
   Seq4_5->value(temp);
}
if(num >= 6)
{
   temp = strtok(NULL, ":");
   Seq4_6->value(temp);
}
if(num >= 7)
{
   temp = strtok(NULL, ":");
   Seq4_7->value(temp);
}
if(num >= 8)
{
   temp = strtok(NULL, ":");
   Seq4_8->value(temp);
}
if(num >= 9)
{
   temp = strtok(NULL, ":");
   Seq4_9->value(temp);
}
if(num >= 10)
{
   temp = strtok(NULL, ":");
   Seq4_10->value(temp);
}

sout.str("");
sout << GET_SUBSEQUENCEORDER;
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
num = atoi(temp);
if(num >= 1)
{
   temp = strtok(NULL, ":");
   Seq1->value(temp);
}
if(num >= 2)
{
   temp = strtok(NULL, ":");
   Seq2->value(temp);
}
if(num >= 3)
{
   temp = strtok(NULL, ":");
   Seq3->value(temp);
}
if(num >= 4)
{
   temp = strtok(NULL, ":");
   Seq4->value(temp);
}
if(num >= 5)
{
   temp = strtok(NULL, ":");
   Seq5->value(temp);
}

// Get the dark sequencing info
sout.str("");
sout << GET_DARKSEQUENCE;
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
if((bool) atoi(temp))
{
   DoDark->value(1);
   DarkFrequency->activate();
   DarkExpTime->activate();
} else
{
   DoDark->value(0);
   DarkFrequency->deactivate();
   DarkExpTime->deactivate();
}

temp = strtok(NULL, ":");
DarkFrequency->value(temp);
temp = strtok(NULL, ":");
DarkExpTime->value(temp);

// Get the periodicty info
sout.str("");
sout << GET_PERIODICITY;
myClient.SendCommand(sout.str());
strcpy(tstr,myClient.myLastReply.c_str());
temp = strtok(tstr, ":");
if((bool) atoi(temp))
{
   DoPeriodicity->value(1);
   PeriodicityFrequency->activate();
} else
{
   DoPeriodicity->value(0);
   PeriodicityFrequency->deactivate();
}

temp = strtok(NULL, ":");
PeriodicityFrequency->value(temp);

// Get the alternate site lat/lon info for scheduling
sout.str("");
sout << GET_SCHEDULELATITUDE;
myClient.SendCommand(sout.str());

myAlternateLatitude = atof(myClient.myLastReply.c_str());
AlternateLatitude->value(myClient.myLastReply.c_str());

sout.str("");
sout << GET_SCHEDULELONGITUDE;
myClient.SendCommand(sout.str());

myAlternateLongitude = atof(myClient.myLastReply.c_str());
AlternateLongitude->value(myClient.myLastReply.c_str());

if((myAlternateLongitude == myLongitude) && (myAlternateLatitude == myLatitude))
{
   // We are not synching to a different site
   AlternateSite->value(0);
   AlternateLatitude->deactivate();
   AlternateLongitude->deactivate();
}
else
{
   // We are synching to a different site
   AlternateSite->value(1);
   AlternateLatitude->activate();
   AlternateLongitude->activate();
};
}
void fltkClientUI::cb_Connect(Fl_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Connect_i(o,v);
}

void fltkClientUI::cb_KillServer_i(Fl_Button*, void*) {
  ostringstream sout;
string cmd;

// Send the kill command
{
   sout << SERVER_STOP << ":";
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
};
}
void fltkClientUI::cb_KillServer(Fl_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_KillServer_i(o,v);
}

void fltkClientUI::cb_SendCamera_i(Fl_Return_Button*, void*) {
  ostringstream sout;
string cmd;

// Check the CCD top parameter
if(CCDTop->value() && myCCDTop != atoi(CCDTop->value()))
{
   sout.str("");
   sout << SET_TOP << ":" << CCDTop->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDTop = atoi(CCDTop->value());
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the CCD left parameter
if(CCDLeft->value() && myCCDLeft != atoi(CCDLeft->value()))
{
   sout.str("");
   sout << SET_LEFT << ":" << CCDLeft->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDLeft = atoi(CCDLeft->value());
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the CCD height parameter
if(CCDHeight->value() && myCCDHeight != atoi(CCDHeight->value()))
{
   sout.str("");
   sout << SET_HEIGHT << ":" << CCDHeight->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDHeight = atoi(CCDHeight->value());
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the CCD width parameter
if(CCDWidth->value() && myCCDWidth != atoi(CCDWidth->value()))
{
   sout.str("");
   sout << SET_WIDTH << ":" << CCDWidth->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDWidth = atoi(CCDWidth->value());
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the CCD temperature parameter
if(CCDTemp->value() && myCCDTemp != atof(CCDTemp->value()))
{
   sout.str("");
   sout << SET_TEMP << ":" << CCDTemp->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDTemp = atof(CCDTemp->value());
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the CCD temperature parameter
if(CCDGain->value() && myCCDGain != atof(CCDGain->value()))
{
   sout.str("");
   sout << SET_GAIN << ":" << CCDGain->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDGain = atof(CCDGain->value());
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the CameraType parameter
if(myCameraType != CameraType->value())
{
   sout.str("");
   sout << SET_CAMERATYPE << ":" << CameraType->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCameraType = CameraType->value();
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the High resolution button
if(CCDHigh->value() && myCCDBinning != 1)
{
   sout.str("");
   sout << SET_XBIN << ":" << 1;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDBinning = 1;
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }

   sout.str("");
   sout << SET_YBIN << ":" << 1;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDBinning = 1;
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the Medium resolution button
if(CCDMed->value() && myCCDBinning != 2)
{
   sout.str("");
   sout << SET_XBIN << ":" << 2;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDBinning = 2;
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }

   sout.str("");
   sout << SET_YBIN << ":" << 2;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDBinning = 2;
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check the Low resolution button
if(CCDLow->value() && myCCDBinning != 3)
{
   sout.str("");
   sout << SET_XBIN << ":" << 3;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDBinning = 3;
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }

   sout.str("");
   sout << SET_YBIN << ":" << 3;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myCCDBinning = 3;
   }
   else
   {
      CameraOutput->value("ERROR sending command");
   }
}

// Check if we want auto temperature regulation
if((bool) DoAutoTemperature->value() != myDoAutoTemperature)
{
   sout.str("");
   sout << SET_CCD_AUTO_TEMP << ":" << (bool) DoAutoTemperature->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      CameraOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myDoAutoTemperature = (bool) DoAutoTemperature->value();
    }
    else
    {
      CameraOutput->value("ERROR sending command");
    }
};
}
void fltkClientUI::cb_SendCamera(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_SendCamera_i(o,v);
}

void fltkClientUI::cb_CCDHigh_i(Fl_Round_Button*, void*) {
  CCDMed->value(0);
CCDLow->value(0);
}
void fltkClientUI::cb_CCDHigh(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CCDHigh_i(o,v);
}

void fltkClientUI::cb_CCDMed_i(Fl_Round_Button*, void*) {
  CCDHigh->value(0);
CCDLow->value(0);
}
void fltkClientUI::cb_CCDMed(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CCDMed_i(o,v);
}

void fltkClientUI::cb_CCDLow_i(Fl_Round_Button*, void*) {
  CCDHigh->value(0);
CCDMed->value(0);
}
void fltkClientUI::cb_CCDLow(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CCDLow_i(o,v);
}

void fltkClientUI::cb_SendFilterWheel_i(Fl_Return_Button*, void*) {
  ostringstream sout;
string cmd;

// Check the CameraType parameter
if(myFilterWheelType != FilterWheelType->value())
{
   sout.str("");
   sout << SET_FILTERWHEELTYPE << ":" << FilterWheelType->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      FilterWheelOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myFilterWheelType = FilterWheelType->value();
   }
   else
   {
      FilterWheelOutput->value("ERROR sending command");
   }
}


if(NumFilters->value() && myNumFilters != atoi(NumFilters->value()))
{
   sout.str("");
   sout << SET_NUMFILTERS << ":" << NumFilters->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      FilterWheelOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myNumFilters = atoi(NumFilters->value());
   }
   else
   {
      FilterWheelOutput->value("ERROR sending command");
   }
}

// Send all five filter positions
sout.str("");
int Shutter;
if(Shutter1->value())
   Shutter = 1;
else
   Shutter = 0;
sout << SET_FILTERINFO << ":1:" << Name1->value() << ":" << Height1->value() << ":" << Exp1->value() << ":" << Shutter;
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   FilterWheelOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   FilterWheelOutput->value("ERROR sending command");
}

sout.str("");
if(Shutter2->value())
   Shutter = 1;
else
   Shutter = 0;
sout << SET_FILTERINFO << ":2:" << Name2->value() << ":" << Height2->value() << ":" << Exp2->value() << ":" << Shutter;
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   FilterWheelOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   FilterWheelOutput->value("ERROR sending command");
}

sout.str("");
if(Shutter3->value())
   Shutter = 1;
else
   Shutter = 0;
sout << SET_FILTERINFO << ":3:" << Name3->value() << ":" << Height3->value() << ":" << Exp3->value() << ":" << Shutter;
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   FilterWheelOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   FilterWheelOutput->value("ERROR sending command");
}

sout.str("");
if(Shutter4->value())
   Shutter = 1;
else
   Shutter = 0;
sout << SET_FILTERINFO << ":4:" << Name4->value() << ":" << Height4->value() << ":" << Exp4->value() << ":" << Shutter;
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   FilterWheelOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   FilterWheelOutput->value("ERROR sending command");
}

sout.str("");
if(Shutter5->value())
   Shutter = 1;
else
   Shutter = 0;
sout << SET_FILTERINFO << ":5:" << Name5->value() << ":" << Height5->value() << ":" << Exp5->value() << ":" << Shutter;
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   FilterWheelOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   FilterWheelOutput->value("ERROR sending command");
}

sout.str("");
if(Shutter6->value())
   Shutter = 1;
else
   Shutter = 0;
sout << SET_FILTERINFO << ":6:" << Name6->value() << ":" << Height6->value() << ":" << Exp6->value() << ":" << Shutter;
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   FilterWheelOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   FilterWheelOutput->value("ERROR sending command");
};
}
void fltkClientUI::cb_SendFilterWheel(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_SendFilterWheel_i(o,v);
}

void fltkClientUI::cb_Shutter1_i(Fl_Round_Button*, void*) {
  Shutter2->value(0);
Shutter3->value(0);
Shutter4->value(0);
Shutter5->value(0);
Shutter6->value(0);
}
void fltkClientUI::cb_Shutter1(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Shutter1_i(o,v);
}

void fltkClientUI::cb_Shutter2_i(Fl_Round_Button*, void*) {
  Shutter1->value(0);
Shutter3->value(0);
Shutter4->value(0);
Shutter5->value(0);
Shutter6->value(0);
}
void fltkClientUI::cb_Shutter2(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Shutter2_i(o,v);
}

void fltkClientUI::cb_Shutter3_i(Fl_Round_Button*, void*) {
  Shutter1->value(0);
Shutter2->value(0);
Shutter4->value(0);
Shutter5->value(0);
Shutter6->value(0);
}
void fltkClientUI::cb_Shutter3(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Shutter3_i(o,v);
}

void fltkClientUI::cb_Shutter4_i(Fl_Round_Button*, void*) {
  Shutter1->value(0);
Shutter2->value(0);
Shutter3->value(0);
Shutter5->value(0);
Shutter6->value(0);
}
void fltkClientUI::cb_Shutter4(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Shutter4_i(o,v);
}

void fltkClientUI::cb_Shutter5_i(Fl_Round_Button*, void*) {
  Shutter1->value(0);
Shutter2->value(0);
Shutter3->value(0);
Shutter4->value(0);
Shutter6->value(0);
}
void fltkClientUI::cb_Shutter5(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Shutter5_i(o,v);
}

void fltkClientUI::cb_Shutter6_i(Fl_Round_Button*, void*) {
  Shutter1->value(0);
Shutter2->value(0);
Shutter3->value(0);
Shutter4->value(0);
Shutter5->value(0);
}
void fltkClientUI::cb_Shutter6(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Shutter6_i(o,v);
}

void fltkClientUI::cb_DoDark_i(Fl_Check_Button*, void*) {
  if(DoDark->value() == 0)
{
   DarkFrequency->deactivate();
   DarkExpTime->deactivate();
}
else
{
   DarkFrequency->activate();
   DarkExpTime->activate();
};
}
void fltkClientUI::cb_DoDark(Fl_Check_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_DoDark_i(o,v);
}

void fltkClientUI::cb_SendSequence_i(Fl_Return_Button*, void*) {
  ostringstream sout;
string cmd;
ostringstream subsout;
int count;

// Read in the four sub-sequences (long and ugly code... I know)
sout.str("");
subsout.str("");
count = 0;

if(atoi(Seq1_1->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_1->value();
}
if(atoi(Seq1_2->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_2->value();
}
if(atoi(Seq1_3->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_3->value();
}
if(atoi(Seq1_4->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_4->value();
}
if(atoi(Seq1_5->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_5->value();
}
if(atoi(Seq1_6->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_6->value();
}
if(atoi(Seq1_7->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_7->value();
}
if(atoi(Seq1_8->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_8->value();
}
if(atoi(Seq1_9->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_9->value();
}
if(atoi(Seq1_10->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1_10->value();
}

sout << SET_SUBSEQUENCE << ":1:" << count << subsout.str();
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   SequenceOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   SequenceOutput->value("ERROR sending command");
}

sout.str("");
subsout.str("");
count = 0;

if(atoi(Seq2_1->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_1->value();
}
if(atoi(Seq2_2->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_2->value();
}
if(atoi(Seq2_3->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_3->value();
}
if(atoi(Seq2_4->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_4->value();
}
if(atoi(Seq2_5->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_5->value();
}
if(atoi(Seq2_6->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_6->value();
}
if(atoi(Seq2_7->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_7->value();
}
if(atoi(Seq2_8->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_8->value();
}
if(atoi(Seq2_9->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_9->value();
}
if(atoi(Seq2_10->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2_10->value();
}

sout << SET_SUBSEQUENCE << ":2:" << count << subsout.str();
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   SequenceOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   SequenceOutput->value("ERROR sending command");
}

sout.str("");
subsout.str("");
count = 0;

if(atoi(Seq3_1->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_1->value();
}
if(atoi(Seq3_2->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_2->value();
}
if(atoi(Seq3_3->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_3->value();
}
if(atoi(Seq3_4->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_4->value();
}
if(atoi(Seq3_5->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_5->value();
}
if(atoi(Seq3_6->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_6->value();
}
if(atoi(Seq3_7->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_7->value();
}
if(atoi(Seq3_8->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_8->value();
}
if(atoi(Seq3_9->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_9->value();
}
if(atoi(Seq3_10->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3_10->value();
}

sout << SET_SUBSEQUENCE << ":3:" << count << subsout.str();
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   SequenceOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   SequenceOutput->value("ERROR sending command");
}

sout.str("");
subsout.str("");
count = 0;

if(atoi(Seq4_1->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_1->value();
}
if(atoi(Seq4_2->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_2->value();
}
if(atoi(Seq4_3->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_3->value();
}
if(atoi(Seq4_4->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_4->value();
}
if(atoi(Seq4_5->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_5->value();
}
if(atoi(Seq4_6->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_6->value();
}
if(atoi(Seq4_7->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_7->value();
}
if(atoi(Seq4_8->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_8->value();
}
if(atoi(Seq4_9->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_9->value();
}
if(atoi(Seq4_10->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4_10->value();
}

sout << SET_SUBSEQUENCE << ":4:" << count << subsout.str();
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   SequenceOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   SequenceOutput->value("ERROR sending command");
}

// Read in the five sub-sequence orders (long and ugly code... I know)
sout.str("");
subsout.str("");
count = 0;

if(atoi(Seq1->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq1->value();
}
if(atoi(Seq2->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq2->value();
}
if(atoi(Seq3->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq3->value();
}
if(atoi(Seq4->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq4->value();
}
if(atoi(Seq5->value()))
{
   // a valid entry
   count++;
   subsout << ":" << Seq5->value();
}

sout << SET_SUBSEQUENCEORDER << ":" << count << subsout.str();
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   SequenceOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   SequenceOutput->value("ERROR sending command");
}

sout.str("");
if(DoDark->value() == 0)
{
   sout << SET_DARKSEQUENCE << ":0:0:0";
} else
{
   sout << SET_DARKSEQUENCE << ":1:" << DarkFrequency->value() << ":" << DarkExpTime->value();
}
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   SequenceOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   SequenceOutput->value("ERROR sending command");
}

sout.str("");
if(DoPeriodicity->value() == 0)
{
   sout << SET_PERIODICITY << ":0:0";
} else
{
   sout << SET_PERIODICITY << ":1:" << PeriodicityFrequency->value();
}
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
   // Command was successful
   SequenceOutput->value(myClient.myLastReply.c_str());
   sout.str("");
}
else
{
   SequenceOutput->value("ERROR sending command");
};
}
void fltkClientUI::cb_SendSequence(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_SendSequence_i(o,v);
}

void fltkClientUI::cb_DoPeriodicity_i(Fl_Check_Button*, void*) {
  if(DoPeriodicity->value() == 0)
   PeriodicityFrequency->deactivate();
else
   PeriodicityFrequency->activate();
}
void fltkClientUI::cb_DoPeriodicity(Fl_Check_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_DoPeriodicity_i(o,v);
}

void fltkClientUI::cb_SendDirectory_i(Fl_Return_Button*, void*) {
  ostringstream sout;
string cmd;

// Check the data directory
if(DataDir->value() && myDataDir != DataDir->value())
{
   sout.str("");
   sout << SET_DATA_DIR << ":" << DataDir->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      DirectoryOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myDataDir = DataDir->value();
   }
   else
   {
      DirectoryOutput->value("ERROR sending command");
   }
}

// Check the png directory
if(PNGDir->value() && myPNGDir != PNGDir->value())
{
   sout.str("");
   sout << SET_PNG_DIR << ":" << PNGDir->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      DirectoryOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myPNGDir = PNGDir->value();
   }
   else
   {
      DirectoryOutput->value("ERROR sending command");
   }
}

// Check the mpg directory
if(MPGDir->value() && myMPGDir != MPGDir->value())
{
   sout.str("");
   sout << SET_MPG_DIR << ":" << MPGDir->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      DirectoryOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myMPGDir = MPGDir->value();
   }
   else
   {
      DirectoryOutput->value("ERROR sending command");
   }
}

// Check the quicklook directory
if(QLDir->value() && myQLDir != QLDir->value())
{
   sout.str("");
   sout << SET_QL_DIR << ":" << QLDir->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      DirectoryOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myQLDir = QLDir->value();
   }
   else
   {
      DirectoryOutput->value("ERROR sending command");
   }
}

// Check the doPNG
if((bool) DoPNG->value() != myDoPNG)
{
   sout.str("");
   sout << SET_DO_PNG << ":" << (bool) DoPNG->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      DirectoryOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myDoPNG = (bool) DoPNG->value();
   }
   else
   {
      DirectoryOutput->value("ERROR sending command");
   }
}

// Check the doPNG
if((bool) DoMPG->value() != myDoMPG)
{
   sout.str("");
   sout << SET_DO_MPG << ":" << (bool) DoMPG->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      DirectoryOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myDoMPG = (bool) DoMPG->value();
   }
   else
   {
      DirectoryOutput->value("ERROR sending command");
   }
}

// Check the doPNG
if((bool) DoQL->value() != myDoQL)
{
   sout.str("");
   sout << SET_DO_QL << ":" << (bool) DoQL->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      DirectoryOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myDoQL = (bool) DoQL->value();
   }
   else
   {
      DirectoryOutput->value("ERROR sending command");
   }
};
}
void fltkClientUI::cb_SendDirectory(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_SendDirectory_i(o,v);
}

void fltkClientUI::cb_SendSite_i(Fl_Return_Button*, void*) {
  ostringstream sout;
string cmd;

// Check the site name
if(SiteName->value() && mySiteName != SiteName->value())
{
   sout.str("");
   sout << SET_SITENAME << ":" << SiteName->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SiteOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      mySiteName = SiteName->value();
   }
   else
   {
      SiteOutput->value("ERROR sending command");
   }
}


// Check the site abbreviation
if(SiteAbbreviation->value() && mySiteAbbreviation != SiteAbbreviation->value())
{
   sout.str("");
   sout << SET_SITEABBR << ":" << SiteAbbreviation->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SiteOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      mySiteAbbreviation = SiteAbbreviation->value();
   }
   else
   {
      SiteOutput->value("ERROR sending command");
   }
}


// Check the site latitude
if(Latitude->value() && myLatitude != atof(Latitude->value()))
{
   sout.str("");
   sout << SET_LATITUDE << ":" << Latitude->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SiteOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myLatitude = atof(Latitude->value());
   }
   else
   {
      SiteOutput->value("ERROR sending command");
   }
}

// Check the site longitude
if(Longitude->value() && myLongitude != atof(Longitude->value()))
{
   sout.str("");
   sout << SET_LONGITUDE << ":" << Longitude->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SiteOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myLongitude = atof(Longitude->value());
   }
   else
   {
      SiteOutput->value("ERROR sending command");
   }
}

// Check the site altitude
if(Altitude->value() && myAltitude != atof(Altitude->value()))
{
   sout.str("");
   sout << SET_ALTITUDE << ":" << Altitude->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SiteOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myAltitude = atof(Altitude->value());
   }
   else
   {
      SiteOutput->value("ERROR sending command");
   }
};
}
void fltkClientUI::cb_SendSite(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_SendSite_i(o,v);
}

void fltkClientUI::cb_Off_i(Fl_Round_Button*, void*) {
  Start->deactivate();
Stop->deactivate();
}
void fltkClientUI::cb_Off(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Off_i(o,v);
}

void fltkClientUI::cb_Auto_i(Fl_Round_Button*, void*) {
  Start->deactivate();
Stop->deactivate();
}
void fltkClientUI::cb_Auto(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Auto_i(o,v);
}

void fltkClientUI::cb_Manual_i(Fl_Round_Button*, void*) {
  Start->activate();
Stop->activate();
}
void fltkClientUI::cb_Manual(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Manual_i(o,v);
}

void fltkClientUI::cb_DoMoonAngle_i(Fl_Round_Button*, void*) {
  if(DoMoonAngle->value() == 0)
   MoonAngle->deactivate();
else
   MoonAngle->activate();
}
void fltkClientUI::cb_DoMoonAngle(Fl_Round_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_DoMoonAngle_i(o,v);
}

void fltkClientUI::cb_SendSchd_i(Fl_Return_Button*, void*) {
  ostringstream sout;
string cmd;

// Check what Mode is selected
if(Off->value() && myScheduleMode != SCHEDULE_OFF)
{
   sout << SCHEDULE_MODE << ":" << SCHEDULE_OFF;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myScheduleMode = SCHEDULE_OFF;
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
}
else if(Auto->value() && myScheduleMode != SCHEDULE_AUTO)
{
   sout << SCHEDULE_MODE << ":" << SCHEDULE_AUTO;
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myScheduleMode = SCHEDULE_AUTO;
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
}
else if(Manual->value())
{
   string temp_string;
   int month, day, year, hour, min, sec;
   time_t temp_start_time, temp_stop_time;
   struct tm temp_tm;

   // Read the start time into a time_t structure
   localtime_r(&myStartTime, &temp_tm);

   // Get and parse the start time
   temp_string = Start->value();
   if(sscanf(temp_string.c_str(), "%d/%d/%d %d:%d:%d", &month, &day, &year, &hour, &min, &sec) == 6)
   {
      temp_tm.tm_sec = sec;
      temp_tm.tm_min = min;
      temp_tm.tm_hour = hour;
      temp_tm.tm_mday = day;
      temp_tm.tm_mon = month-1;
      temp_tm.tm_year = year - 1900;
   }
   temp_start_time = mktime(&temp_tm);

   // Now that we have the proper daylight savings, read again
   if(sscanf(temp_string.c_str(), "%d/%d/%d %d:%d:%d", &month, &day, &year, &hour, &min, &sec) == 6)
   {
      temp_tm.tm_sec = sec;
      temp_tm.tm_min = min;
      temp_tm.tm_hour = hour;
      temp_tm.tm_mday = day;
      temp_tm.tm_mon = month-1;
      temp_tm.tm_year = year - 1900;
   }
   temp_start_time = mktime(&temp_tm);

   // Read the stop time into a time_t structure
   localtime_r(&myStopTime, &temp_tm);

   // Get and parse the stop time
   temp_string = Stop->value();
   if(sscanf(temp_string.c_str(), "%d/%d/%d %d:%d:%d", &month, &day, &year, &hour, &min, &sec) == 6)
   {
      temp_tm.tm_sec = sec;
      temp_tm.tm_min = min;
      temp_tm.tm_hour = hour;
      temp_tm.tm_mday = day;
      temp_tm.tm_mon = month-1;
      temp_tm.tm_year = year - 1900;
   }
   temp_stop_time = mktime(&temp_tm);

   // Now that we have the proper daylight savings, read again
   if(sscanf(temp_string.c_str(), "%d/%d/%d %d:%d:%d", &month, &day, &year, &hour, &min, &sec) == 6)
   {
      temp_tm.tm_sec = sec;
      temp_tm.tm_min = min;
      temp_tm.tm_hour = hour;
      temp_tm.tm_mday = day;
      temp_tm.tm_mon = month-1;
      temp_tm.tm_year = year - 1900;
   }
   temp_stop_time = mktime(&temp_tm);

   if(temp_stop_time != myStopTime || temp_start_time != myStartTime || myScheduleMode != SCHEDULE_MANUAL)
   {
      // At least one has changed
      sout << SCHEDULE_MODE << ":" << SCHEDULE_MANUAL << ":" << temp_start_time << ":" << temp_stop_time;
      cmd = sout.str();
      if(myClient.SendCommand(cmd))
      {
         // Command was successful
         SchdOutput->value(myClient.myLastReply.c_str());
         sout.str("");
         myScheduleMode = SCHEDULE_MANUAL;
         myStartTime = temp_start_time;
         myStopTime = temp_stop_time;
      }
      else
      {
         SchdOutput->value("ERROR sending command");
      }
   }
}

// Check the angles
if(SunAngle->value() && mySunAngle != atof(SunAngle->value()))
{
   sout << ANGLES_SET << ":" << ANGLE_SUN << ":" << SunAngle->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      mySunAngle = atof(SunAngle->value());
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
}

if(myMoonSet != DoMoonAngle->value())
{
   // The moonset flag
   sout << ANGLES_SET << ":" << ANGLE_DOMOON << ":" << (bool) DoMoonAngle->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myMoonSet = DoMoonAngle->value();
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
}

if(MoonAngle->value() && myMoonAngle != atof(MoonAngle->value()))
{
   sout << ANGLES_SET << ":" << ANGLE_MOON << ":" << MoonAngle->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myMoonAngle = atof(MoonAngle->value());
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
}

// Check the synchronization flag
if(AlternateSite->value() == 0)
{
   // Send site latitude
   sout.str("");
   sout << SET_SCHEDULELATITUDE << ":" << Latitude->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myAlternateLatitude = atof(Latitude->value());
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
   
   // Send site longitude
   sout.str("");
   sout << SET_SCHEDULELONGITUDE << ":" << Longitude->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myAlternateLongitude = atof(Longitude->value());
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
}
else
{
   // Send alternate site latitude
   sout.str("");
   sout << SET_SCHEDULELATITUDE << ":" << AlternateLatitude->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myAlternateLatitude = atof(AlternateLatitude->value());
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
   
   // Send alternate site longitude
   sout.str("");
   sout << SET_SCHEDULELONGITUDE << ":" << AlternateLongitude->value();
   cmd = sout.str();
   if(myClient.SendCommand(cmd))
   {
      // Command was successful
      SchdOutput->value(myClient.myLastReply.c_str());
      sout.str("");
      myAlternateLongitude = atof(AlternateLongitude->value());
   }
   else
   {
      SchdOutput->value("ERROR sending command");
   }
};
}
void fltkClientUI::cb_SendSchd(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_SendSchd_i(o,v);
}

void fltkClientUI::cb_AlternateSite_i(Fl_Check_Button*, void*) {
  if(AlternateSite->value() == 0)
{
   AlternateLatitude->deactivate();
   AlternateLongitude->deactivate();
}
else
{
   AlternateLatitude->activate();
   AlternateLongitude->activate();
};
}
void fltkClientUI::cb_AlternateSite(Fl_Check_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_AlternateSite_i(o,v);
}

void fltkClientUI::cb_CaptureNow_i(Fl_Return_Button*, void*) {
  ostringstream sout;
string cmd;

bool myDark;
bool mySavePNG;
string myFileStub;
double myExpTime;
int myFilter;

myDark = Dark->value();
myFileStub = Stub->value();
myFilter = atoi(Filter->value());
myExpTime = atof(ExpTime->value());
mySavePNG = SavePNG->value();

sout << CAPTURE_IMAGE << ":" << myExpTime << ":" << myDark << ":" << myFilter << ":" << myFileStub << ":" << mySavePNG;
cmd = sout.str();
if(myClient.SendCommand(cmd))
{
  // Command was successful
  CaptureOutput->value(myClient.myLastReply.c_str());
}
else
{
  CaptureOutput->value("ERROR taking image");
};
}
void fltkClientUI::cb_CaptureNow(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_CaptureNow_i(o,v);
}

void fltkClientUI::cb_SendCmd_i(Fl_Return_Button*, void*) {
  string cmd;
string reply;
cmd = InputText->value();
cout << cmd << endl;
if(myClient.SendCommand(cmd))
{
  OutputText->value(myClient.myLastReply.c_str());
};
}
void fltkClientUI::cb_SendCmd(Fl_Return_Button* o, void* v) {
  ((fltkClientUI*)(o->parent()->parent()->parent()->user_data()))->cb_SendCmd_i(o,v);
}
using namespace std;
#include "client.h"

fltkClientUI::fltkClientUI() {
  { CDASClient = new Fl_Double_Window(700, 310, "CDAS Client");
    CDASClient->user_data((void*)(this));
    { Tabs = new Fl_Tabs(0, 0, 695, 307);
      { Command = new Fl_Group(8, 25, 437, 275, "Command");
        { ServerInfo = new Fl_Group(8, 46, 427, 62, "Server Information");
          ServerInfo->box(FL_BORDER_BOX);
          ServerInfo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Address = new Fl_Input(74, 50, 350, 25, "Address:");
            Address->tooltip("IP address for the server (use \"localhost\" if on local machine)");
          } // Fl_Input* Address
          { Port = new Fl_Input(74, 79, 100, 25, "Port:");
            Port->tooltip("Default port is 30000");
          } // Fl_Input* Port
          { Connect = new Fl_Button(349, 79, 75, 25, "Connect");
            Connect->tooltip("Connect to the CDAS server");
            Connect->callback((Fl_Callback*)cb_Connect);
          } // Fl_Button* Connect
          ServerInfo->end();
        } // Fl_Group* ServerInfo
        { KillServer = new Fl_Button(330, 265, 100, 25, "Kill Server");
          KillServer->tooltip("Shutdown the CDAS server (must have already connected to it)");
          KillServer->callback((Fl_Callback*)cb_KillServer);
        } // Fl_Button* KillServer
        Command->end();
      } // Fl_Group* Command
      { Camera = new Fl_Group(8, 25, 612, 275, "Camera");
        Camera->hide();
        { SendCamera = new Fl_Return_Button(360, 265, 75, 25, "Send");
          SendCamera->tooltip("Send changes to CDAS server");
          SendCamera->callback((Fl_Callback*)cb_SendCamera);
        } // Fl_Return_Button* SendCamera
        { CameraOutput = new Fl_Output(8, 265, 350, 25);
        } // Fl_Output* CameraOutput
        { CCDSize = new Fl_Group(10, 50, 450, 125, "CCD Size");
          CCDSize->box(FL_BORDER_BOX);
          CCDSize->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { CCDTop = new Fl_Input(105, 55, 50, 25, "CCD Top:");
            CCDTop->tooltip("Coordinate of the top-most pixel (in full-resolution pixels)");
          } // Fl_Input* CCDTop
          { CCDLeft = new Fl_Input(105, 85, 50, 25, "CCD Left:");
            CCDLeft->tooltip("Coordinate of the left-most pixel (in full-resolution pixels)");
          } // Fl_Input* CCDLeft
          { CCDHeight = new Fl_Input(105, 115, 50, 25, "CCD Height:");
            CCDHeight->tooltip("Number of pixels in the vertical direction (in full-resolution pixels)");
          } // Fl_Input* CCDHeight
          { CCDWidth = new Fl_Input(105, 145, 50, 25, "CCD Width:");
            CCDWidth->tooltip("Number of pixels in the horizontal direction (in full-resolution pixels)");
          } // Fl_Input* CCDWidth
          { CCDHigh = new Fl_Round_Button(201, 85, 25, 25, "High Resolution");
            CCDHigh->down_box(FL_ROUND_DOWN_BOX);
            CCDHigh->callback((Fl_Callback*)cb_CCDHigh);
          } // Fl_Round_Button* CCDHigh
          { CCDMed = new Fl_Round_Button(201, 115, 25, 25, "Medium Resolution (2x2 Binning)");
            CCDMed->down_box(FL_ROUND_DOWN_BOX);
            CCDMed->callback((Fl_Callback*)cb_CCDMed);
          } // Fl_Round_Button* CCDMed
          { CCDLow = new Fl_Round_Button(201, 145, 25, 25, "Low Resolution (3x3 Binning)");
            CCDLow->down_box(FL_ROUND_DOWN_BOX);
            CCDLow->callback((Fl_Callback*)cb_CCDLow);
          } // Fl_Round_Button* CCDLow
          CCDSize->end();
        } // Fl_Group* CCDSize
        { CameraType = new Fl_Choice(115, 220, 190, 25, "CameraType");
          CameraType->down_box(FL_BORDER_BOX);
        } // Fl_Choice* CameraType
        { CCDTemp = new Fl_Input(232, 190, 75, 25, "CCD Temperature Setpoint (C):");
          CCDTemp->tooltip("Temperature to cool CCD to during data collection");
        } // Fl_Input* CCDTemp
        { CCDGain = new Fl_Input(435, 190, 75, 25, "CCD gain (1-6):");
          CCDGain->tooltip("CCD gain (not used by all CCD models)");
        } // Fl_Input* CCDGain
        { DoAutoTemperature = new Fl_Check_Button(330, 220, 25, 25, "Auto Temperature Regularization");
          DoAutoTemperature->tooltip("If checked, turn CCD cooling off during the daytime");
          DoAutoTemperature->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* DoAutoTemperature
        Camera->end();
      } // Fl_Group* Camera
      { Fl_Group* o = new Fl_Group(8, 25, 677, 280, "FilterWheel");
        o->hide();
        { FilterWheelType = new Fl_Choice(130, 45, 180, 25, "Filter wheel type");
          FilterWheelType->down_box(FL_BORDER_BOX);
        } // Fl_Choice* FilterWheelType
        { SendFilterWheel = new Fl_Return_Button(360, 265, 75, 25, "Send");
          SendFilterWheel->tooltip("Send changes to CDAS server");
          SendFilterWheel->callback((Fl_Callback*)cb_SendFilterWheel);
        } // Fl_Return_Button* SendFilterWheel
        { FilterWheelOutput = new Fl_Output(8, 265, 350, 25);
        } // Fl_Output* FilterWheelOutput
        { Fl_Group* o = new Fl_Group(10, 94, 675, 144, "Filter Information");
          o->box(FL_BORDER_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Output* o = new Fl_Output(85, 120, 0, 0, "Position:");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Fl_Output* o = new Fl_Output(137, 120, 0, 0, "1");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* o
          { Fl_Output* o = new Fl_Output(237, 120, 0, 0, "2");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* o
          { Fl_Output* o = new Fl_Output(337, 120, 0, 0, "3");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* o
          { Fl_Output* o = new Fl_Output(437, 120, 0, 0, "4");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* o
          { Fl_Output* o = new Fl_Output(537, 120, 0, 0, "5");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* o
          { Fl_Output* o = new Fl_Output(637, 120, 0, 0, "6");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* o
          { Fl_Output* o = new Fl_Output(85, 140, 0, 0, "Name:");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Name1 = new Fl_Input(97, 120, 80, 25);
            Name1->tooltip("Filter name (e.g., \"6300\")");
            Name1->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Name1
          { Name2 = new Fl_Input(197, 120, 80, 25);
            Name2->tooltip("Filter name (e.g., \"6300\")");
            Name2->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Name2
          { Name3 = new Fl_Input(297, 120, 80, 25);
            Name3->tooltip("Filter name (e.g., \"6300\")");
            Name3->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Name3
          { Name4 = new Fl_Input(397, 120, 80, 25);
            Name4->tooltip("Filter name (e.g., \"6300\")");
            Name4->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Name4
          { Name5 = new Fl_Input(497, 120, 80, 25);
            Name5->tooltip("Filter name (e.g., \"6300\")");
            Name5->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Name5
          { Name6 = new Fl_Input(597, 120, 80, 25);
            Name6->tooltip("Filter name (e.g., \"6300\")");
            Name6->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Name6
          { Fl_Output* o = new Fl_Output(85, 170, 0, 0, "Height:");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Height1 = new Fl_Input(97, 150, 80, 25);
            Height1->tooltip("Assume altitude of emission layer");
            Height1->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Height1
          { Height2 = new Fl_Input(197, 150, 80, 25);
            Height2->tooltip("Assumed altitude of emission layer");
            Height2->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Height2
          { Height3 = new Fl_Input(297, 150, 80, 25);
            Height3->tooltip("Assumed altitude of emission layer");
          } // Fl_Input* Height3
          { Height4 = new Fl_Input(397, 150, 80, 25);
            Height4->tooltip("Assummed altitude of emission layer");
          } // Fl_Input* Height4
          { Height5 = new Fl_Input(497, 150, 80, 25);
            Height5->tooltip("Assumed altitude of emission layer");
          } // Fl_Input* Height5
          { Height6 = new Fl_Input(597, 150, 80, 25);
            Height6->tooltip("Assumed altitude of emission layer");
          } // Fl_Input* Height6
          { Fl_Output* o = new Fl_Output(85, 200, 0, 0, "Exp Time:");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Exp1 = new Fl_Input(97, 180, 80, 25);
            Exp1->tooltip("Exposure time (seconds)");
            Exp1->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Exp1
          { Exp2 = new Fl_Input(197, 180, 80, 25);
            Exp2->tooltip("Exposure time (seconds)");
            Exp2->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Input* Exp2
          { Exp3 = new Fl_Input(297, 180, 80, 25);
            Exp3->tooltip("Exposure time (seconds)");
          } // Fl_Input* Exp3
          { Exp4 = new Fl_Input(397, 180, 80, 25);
            Exp4->tooltip("Exposure time (seconds)");
          } // Fl_Input* Exp4
          { Exp5 = new Fl_Input(497, 180, 80, 25);
            Exp5->tooltip("Exposure time (seconds)");
          } // Fl_Input* Exp5
          { Exp6 = new Fl_Input(597, 180, 80, 25);
            Exp6->tooltip("Exposure time (seconds)");
          } // Fl_Input* Exp6
          { Fl_Output* o = new Fl_Output(85, 230, 0, 0, "Shutter?:");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Shutter1 = new Fl_Round_Button(134, 210, 25, 25);
            Shutter1->tooltip("Is this the shutter position? (not used in systems with an external shutter)");
            Shutter1->down_box(FL_ROUND_DOWN_BOX);
            Shutter1->callback((Fl_Callback*)cb_Shutter1);
          } // Fl_Round_Button* Shutter1
          { Shutter2 = new Fl_Round_Button(234, 210, 25, 25);
            Shutter2->tooltip("Is this the shutter position? (not used in systems with an external shutter)");
            Shutter2->down_box(FL_ROUND_DOWN_BOX);
            Shutter2->callback((Fl_Callback*)cb_Shutter2);
          } // Fl_Round_Button* Shutter2
          { Shutter3 = new Fl_Round_Button(334, 210, 25, 25);
            Shutter3->tooltip("Is this the shutter position? (not used in systems with an external shutter)");
            Shutter3->down_box(FL_ROUND_DOWN_BOX);
            Shutter3->callback((Fl_Callback*)cb_Shutter3);
          } // Fl_Round_Button* Shutter3
          { Shutter4 = new Fl_Round_Button(434, 210, 25, 25);
            Shutter4->tooltip("Is this the shutter position? (not used in systems with an external shutter)");
            Shutter4->down_box(FL_ROUND_DOWN_BOX);
            Shutter4->callback((Fl_Callback*)cb_Shutter4);
          } // Fl_Round_Button* Shutter4
          { Shutter5 = new Fl_Round_Button(534, 210, 25, 25);
            Shutter5->tooltip("Is this the shutter position? (not used in systems with an external shutter)");
            Shutter5->down_box(FL_ROUND_DOWN_BOX);
            Shutter5->callback((Fl_Callback*)cb_Shutter5);
          } // Fl_Round_Button* Shutter5
          { Shutter6 = new Fl_Round_Button(634, 210, 25, 25);
            Shutter6->tooltip("Is this the shutter position? (not used in systems with an external shutter)");
            Shutter6->down_box(FL_ROUND_DOWN_BOX);
            Shutter6->callback((Fl_Callback*)cb_Shutter6);
          } // Fl_Round_Button* Shutter6
          o->end();
        } // Fl_Group* o
        { NumFilters = new Fl_Input(500, 45, 40, 25, "Number of filter positions:");
          NumFilters->tooltip("Number of filter positions in filter wheel (usually 5 or 6)");
        } // Fl_Input* NumFilters
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 25, 640, 280, "Sequence");
        o->hide();
        { DoDark = new Fl_Check_Button(5, 230, 25, 25, "Dark Image Every");
          DoDark->tooltip("Check to take a dark image during data taking");
          DoDark->down_box(FL_DOWN_BOX);
          DoDark->callback((Fl_Callback*)cb_DoDark);
        } // Fl_Check_Button* DoDark
        { DarkFrequency = new Fl_Input(155, 230, 40, 25);
          DarkFrequency->tooltip("How many sky images between dark images?");
        } // Fl_Input* DarkFrequency
        { new Fl_Output(335, 230, 0, 25, "images w/ exp. (s):");
        } // Fl_Output* o
        { DarkExpTime = new Fl_Input(335, 230, 25, 25);
          DarkExpTime->tooltip("Exposure time for dark images (seconds)");
        } // Fl_Input* DarkExpTime
        { SendSequence = new Fl_Return_Button(360, 265, 75, 25, "Send");
          SendSequence->tooltip("Send changes to CDAS server");
          SendSequence->callback((Fl_Callback*)cb_SendSequence);
        } // Fl_Return_Button* SendSequence
        { SequenceOutput = new Fl_Output(8, 265, 350, 25);
        } // Fl_Output* SequenceOutput
        { DoPeriodicity = new Fl_Check_Button(365, 230, 25, 25, "Wait");
          DoPeriodicity->tooltip("Check if an image is desired at a set periodicity (rather than as fast as pos\
sible)");
          DoPeriodicity->down_box(FL_DOWN_BOX);
          DoPeriodicity->callback((Fl_Callback*)cb_DoPeriodicity);
        } // Fl_Check_Button* DoPeriodicity
        { PeriodicityFrequency = new Fl_Input(420, 230, 40, 25);
          PeriodicityFrequency->tooltip("Time between consecutive images (seconds)");
        } // Fl_Input* PeriodicityFrequency
        { new Fl_Output(645, 230, 0, 25, "seconds between images");
        } // Fl_Output* o
        { Fl_Group* o = new Fl_Group(15, 50, 387, 135, "Sub-sequences");
          o->box(FL_BORDER_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Output* o = new Fl_Output(70, 80, 0, 0, "Seq. 1:");
            o->tooltip("First filter sequence (enter the filter numbers to cycle through)");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Seq1_1 = new Fl_Input(90, 60, 25, 25);
            Seq1_1->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_1
          { Seq1_2 = new Fl_Input(120, 60, 25, 25);
            Seq1_2->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_2
          { Seq1_3 = new Fl_Input(150, 60, 25, 25);
            Seq1_3->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_3
          { Seq1_4 = new Fl_Input(180, 60, 25, 25);
            Seq1_4->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_4
          { Seq1_5 = new Fl_Input(210, 60, 25, 25);
            Seq1_5->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_5
          { Seq1_6 = new Fl_Input(240, 60, 25, 25);
            Seq1_6->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_6
          { Seq1_7 = new Fl_Input(270, 60, 25, 25);
            Seq1_7->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_7
          { Seq1_8 = new Fl_Input(300, 60, 25, 25);
            Seq1_8->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_8
          { Seq1_9 = new Fl_Input(330, 60, 25, 25);
            Seq1_9->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_9
          { Seq1_10 = new Fl_Input(360, 60, 25, 25);
            Seq1_10->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq1_10
          { Fl_Output* o = new Fl_Output(70, 110, 0, 0, "Seq. 2:");
            o->tooltip("Second filter sequence (enter the filter numbers to cycle through)");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Seq2_1 = new Fl_Input(90, 90, 25, 25);
            Seq2_1->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_1
          { Seq2_2 = new Fl_Input(120, 90, 25, 25);
            Seq2_2->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_2
          { Seq2_3 = new Fl_Input(150, 90, 25, 25);
            Seq2_3->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_3
          { Seq2_4 = new Fl_Input(180, 90, 25, 25);
            Seq2_4->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_4
          { Seq2_5 = new Fl_Input(210, 90, 25, 25);
            Seq2_5->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_5
          { Seq2_6 = new Fl_Input(240, 90, 25, 25);
            Seq2_6->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_6
          { Seq2_7 = new Fl_Input(270, 90, 25, 25);
            Seq2_7->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_7
          { Seq2_8 = new Fl_Input(300, 90, 25, 25);
            Seq2_8->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_8
          { Seq2_9 = new Fl_Input(330, 90, 25, 25);
            Seq2_9->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_9
          { Seq2_10 = new Fl_Input(360, 90, 25, 25);
            Seq2_10->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq2_10
          { Fl_Output* o = new Fl_Output(70, 140, 0, 0, "Seq. 3:");
            o->tooltip("Third filter sequence (enter the filter numbers to cycle through)");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Seq3_1 = new Fl_Input(90, 120, 25, 25);
            Seq3_1->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_1
          { Seq3_2 = new Fl_Input(120, 120, 25, 25);
            Seq3_2->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_2
          { Seq3_3 = new Fl_Input(150, 120, 25, 25);
            Seq3_3->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_3
          { Seq3_4 = new Fl_Input(180, 120, 25, 25);
            Seq3_4->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_4
          { Seq3_5 = new Fl_Input(210, 120, 25, 25);
            Seq3_5->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_5
          { Seq3_6 = new Fl_Input(240, 120, 25, 25);
            Seq3_6->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_6
          { Seq3_7 = new Fl_Input(270, 120, 25, 25);
            Seq3_7->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_7
          { Seq3_8 = new Fl_Input(300, 120, 25, 25);
            Seq3_8->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_8
          { Seq3_9 = new Fl_Input(330, 120, 25, 25);
            Seq3_9->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_9
          { Seq3_10 = new Fl_Input(360, 120, 25, 25);
            Seq3_10->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq3_10
          { Fl_Output* o = new Fl_Output(70, 170, 0, 0, "Seq. 4:");
            o->tooltip("Fourth filter sequence (enter the filter numbers to cycle through)");
            o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          } // Fl_Output* o
          { Seq4_1 = new Fl_Input(90, 150, 25, 25);
            Seq4_1->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_1
          { Seq4_2 = new Fl_Input(120, 150, 25, 25);
            Seq4_2->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_2
          { Seq4_3 = new Fl_Input(150, 150, 25, 25);
            Seq4_3->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_3
          { Seq4_4 = new Fl_Input(180, 150, 25, 25);
            Seq4_4->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_4
          { Seq4_5 = new Fl_Input(210, 150, 25, 25);
            Seq4_5->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_5
          { Seq4_6 = new Fl_Input(240, 150, 25, 25);
            Seq4_6->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_6
          { Seq4_7 = new Fl_Input(270, 150, 25, 25);
            Seq4_7->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_7
          { Seq4_8 = new Fl_Input(300, 150, 25, 25);
            Seq4_8->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_8
          { Seq4_9 = new Fl_Input(330, 150, 25, 25);
            Seq4_9->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_9
          { Seq4_10 = new Fl_Input(360, 150, 25, 25);
            Seq4_10->align(Fl_Align(FL_ALIGN_CENTER));
          } // Fl_Input* Seq4_10
          o->end();
        } // Fl_Group* o
        { Fl_Output* o = new Fl_Output(85, 220, 0, 0, "Sequence:");
          o->tooltip("Sequence (enter the sequence numbers to cycle through)");
          o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        } // Fl_Output* o
        { Seq1 = new Fl_Input(105, 200, 25, 25);
          Seq1->align(Fl_Align(FL_ALIGN_CENTER));
        } // Fl_Input* Seq1
        { Seq2 = new Fl_Input(135, 200, 25, 25);
          Seq2->align(Fl_Align(FL_ALIGN_CENTER));
        } // Fl_Input* Seq2
        { Seq3 = new Fl_Input(165, 200, 25, 25);
          Seq3->align(Fl_Align(FL_ALIGN_CENTER));
        } // Fl_Input* Seq3
        { Seq4 = new Fl_Input(195, 200, 25, 25);
          Seq4->align(Fl_Align(FL_ALIGN_CENTER));
        } // Fl_Input* Seq4
        { Seq5 = new Fl_Input(225, 200, 25, 25);
          Seq5->align(Fl_Align(FL_ALIGN_CENTER));
        } // Fl_Input* Seq5
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(8, 25, 437, 275, "Directories");
        o->hide();
        { DataDir = new Fl_Input(153, 45, 210, 25, "Data Directory: ");
          DataDir->tooltip("Full path to data directory");
        } // Fl_Input* DataDir
        { PNGDir = new Fl_Input(153, 75, 210, 25, "PNG Directory: ");
          PNGDir->tooltip("Full path to location to save PNG files");
        } // Fl_Input* PNGDir
        { DoPNG = new Fl_Check_Button(158, 105, 25, 25, "Save PNG");
          DoPNG->tooltip("Check to save PNG images (in addition to raw TIF images)");
          DoPNG->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* DoPNG
        { MPGDir = new Fl_Input(153, 135, 210, 25, "Movie Directory: ");
          MPGDir->tooltip("Full path to location to save daily summary movies");
        } // Fl_Input* MPGDir
        { DoMPG = new Fl_Check_Button(158, 165, 25, 25, "Save Movies");
          DoMPG->tooltip("Check to save daily summary movies");
          DoMPG->down_box(FL_DOWN_BOX);
          DoMPG->deactivate();
        } // Fl_Check_Button* DoMPG
        { QLDir = new Fl_Input(153, 195, 210, 25, "Quicklook Directory: ");
          QLDir->tooltip("Full path to location to save quicklook summary images");
        } // Fl_Input* QLDir
        { DoQL = new Fl_Check_Button(158, 225, 25, 25, "Save Quicklooks");
          DoQL->tooltip("Check to save quicklook summary images");
          DoQL->down_box(FL_DOWN_BOX);
          DoQL->deactivate();
        } // Fl_Check_Button* DoQL
        { DirectoryOutput = new Fl_Input(8, 265, 350, 25);
        } // Fl_Input* DirectoryOutput
        { SendDirectory = new Fl_Return_Button(360, 265, 75, 25, "Send");
          SendDirectory->tooltip("Send changes to CDAS server");
          SendDirectory->callback((Fl_Callback*)cb_SendDirectory);
        } // Fl_Return_Button* SendDirectory
        o->end();
      } // Fl_Group* o
      { Site = new Fl_Group(8, 25, 437, 275, "Site");
        Site->hide();
        { SiteName = new Fl_Input(135, 45, 200, 25, "Site Name:");
          SiteName->tooltip("Site name");
        } // Fl_Input* SiteName
        { SiteAbbreviation = new Fl_Input(135, 75, 50, 25, "Site Abbreviation:");
          SiteAbbreviation->tooltip("Site abbreviation (used in forming image filename)");
        } // Fl_Input* SiteAbbreviation
        { SendSite = new Fl_Return_Button(360, 265, 75, 25, "Send");
          SendSite->tooltip("Send changes to CDAS server");
          SendSite->callback((Fl_Callback*)cb_SendSite);
        } // Fl_Return_Button* SendSite
        { Fl_Group* o = new Fl_Group(10, 130, 425, 105, "Location Info");
          o->box(FL_BORDER_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Latitude = new Fl_Input(155, 139, 75, 25, "Latitude (Deg. N):");
          } // Fl_Input* Latitude
          { Longitude = new Fl_Input(155, 171, 75, 25, "Longitude (Deg. E):");
          } // Fl_Input* Longitude
          { Altitude = new Fl_Input(155, 203, 75, 25, "Altitude (km):");
          } // Fl_Input* Altitude
          o->end();
        } // Fl_Group* o
        { SiteOutput = new Fl_Output(8, 265, 350, 25);
        } // Fl_Output* SiteOutput
        Site->end();
      } // Fl_Group* Site
      { Schedule = new Fl_Group(8, 25, 622, 275, "Schedule");
        Schedule->hide();
        { Modes = new Fl_Group(8, 46, 427, 119, "Modes");
          Modes->box(FL_BORDER_BOX);
          Modes->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Off = new Fl_Round_Button(20, 48, 100, 25, "Off");
            Off->tooltip("Turn off the automatic scheduler");
            Off->type(102);
            Off->down_box(FL_ROUND_DOWN_BOX);
            Off->callback((Fl_Callback*)cb_Off);
          } // Fl_Round_Button* Off
          { Auto = new Fl_Round_Button(20, 68, 100, 25, "Automatic");
            Auto->tooltip("Turn on the automatic scheduler (set parameters for sun and moon angles below\
)");
            Auto->type(102);
            Auto->down_box(FL_ROUND_DOWN_BOX);
            Auto->callback((Fl_Callback*)cb_Auto);
          } // Fl_Round_Button* Auto
          { Manual = new Fl_Round_Button(20, 87, 100, 25, "Manual");
            Manual->tooltip("Manual scheduling (set start and stop time below)");
            Manual->type(102);
            Manual->down_box(FL_ROUND_DOWN_BOX);
            Manual->callback((Fl_Callback*)cb_Manual);
          } // Fl_Round_Button* Manual
          { Start = new Fl_Input(70, 110, 300, 25, "Start:");
            Start->tooltip("Start time (e.g., \"05/18/2014 22:00:00\")");
          } // Fl_Input* Start
          { Stop = new Fl_Input(70, 137, 300, 25, "Stop:");
            Stop->tooltip("Stop time (e.g., \"05/19/2014 04:00:00\")");
          } // Fl_Input* Stop
          Modes->end();
        } // Fl_Group* Modes
        { Horizon = new Fl_Group(8, 193, 427, 60, "Horizon Angles");
          Horizon->box(FL_BORDER_BOX);
          Horizon->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { SunAngle = new Fl_Input(191, 197, 100, 25, "Sun Angle (Degrees):");
            SunAngle->tooltip("Solar depression angle to start/stop data collection at when in \"Automatic\"\
 mode (e.g., \"12\" for nautical twilight)");
          } // Fl_Input* SunAngle
          { MoonAngle = new Fl_Input(191, 225, 100, 25);
          } // Fl_Input* MoonAngle
          { DoMoonAngle = new Fl_Round_Button(20, 225, 170, 25, "Moon Angle (Degrees):");
            DoMoonAngle->tooltip("Set to restrict data taking to when the moon is below the horizon.  Used when\
 in \"Automatic\" mode (e.g., \"0\" to have the moon be below the horizon)");
            DoMoonAngle->down_box(FL_ROUND_DOWN_BOX);
            DoMoonAngle->callback((Fl_Callback*)cb_DoMoonAngle);
          } // Fl_Round_Button* DoMoonAngle
          Horizon->end();
        } // Fl_Group* Horizon
        { SendSchd = new Fl_Return_Button(360, 265, 75, 25, "Send");
          SendSchd->tooltip("Send changes to CDAS server");
          SendSchd->callback((Fl_Callback*)cb_SendSchd);
        } // Fl_Return_Button* SendSchd
        { SchdOutput = new Fl_Output(8, 265, 350, 25);
        } // Fl_Output* SchdOutput
        { AlternateSite = new Fl_Check_Button(450, 48, 25, 25, "Synchronize Site");
          AlternateSite->tooltip("Check if the Automatic start/stop time should be determined based on an alter\
nate location");
          AlternateSite->down_box(FL_DOWN_BOX);
          AlternateSite->callback((Fl_Callback*)cb_AlternateSite);
        } // Fl_Check_Button* AlternateSite
        { AlternateLatitude = new Fl_Input(595, 70, 75, 25, "Latitude (Deg. N):");
          AlternateLatitude->tooltip("Latitude for site synchronization");
        } // Fl_Input* AlternateLatitude
        { AlternateLongitude = new Fl_Input(595, 95, 75, 25, "Longitude (Deg. E):");
          AlternateLongitude->tooltip("Longitude for site synchronization");
        } // Fl_Input* AlternateLongitude
        Schedule->end();
      } // Fl_Group* Schedule
      { Capture = new Fl_Group(5, 25, 437, 280, "Capture");
        Capture->hide();
        { ExpTime = new Fl_Input(140, 50, 51, 25, "Exposure Time (s):");
          ExpTime->tooltip("Exposure time (seconds)");
        } // Fl_Input* ExpTime
        { Dark = new Fl_Check_Button(7, 135, 25, 25, "Dark Image");
          Dark->tooltip("Check to take a dark image");
          Dark->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* Dark
        { Stub = new Fl_Input(115, 80, 163, 25, "Filename Stub:");
          Stub->tooltip("Filename to use (data will be saved in the \"Data\" directory");
        } // Fl_Input* Stub
        { CaptureNow = new Fl_Return_Button(292, 265, 140, 25, "Capture Image...");
          CaptureNow->tooltip("Capture image with specified parameters");
          CaptureNow->callback((Fl_Callback*)cb_CaptureNow);
        } // Fl_Return_Button* CaptureNow
        { CaptureOutput = new Fl_Output(5, 265, 285, 25);
        } // Fl_Output* CaptureOutput
        { SavePNG = new Fl_Check_Button(7, 155, 25, 25, "Save PNG");
          SavePNG->tooltip("Check to save a PNG file (in addition to a TIF image)");
          SavePNG->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* SavePNG
        { Filter = new Fl_Input(115, 110, 33, 25, "Filter:");
          Filter->tooltip("Filter number to use");
        } // Fl_Input* Filter
        Capture->end();
      } // Fl_Group* Capture
      { Advanced = new Fl_Group(25, 25, 415, 255, "Advanced");
        Advanced->hide();
        { InputText = new Fl_Input(60, 50, 350, 25, "Input:");
          InputText->tooltip("Command to send to the CDAS server");
        } // Fl_Input* InputText
        { SendCmd = new Fl_Return_Button(335, 83, 75, 25, "Send");
          SendCmd->tooltip("Send command to CDAS server");
          SendCmd->callback((Fl_Callback*)cb_SendCmd);
        } // Fl_Return_Button* SendCmd
        { OutputText = new Fl_Output(60, 115, 350, 25, "Output:");
        } // Fl_Output* OutputText
        Advanced->end();
      } // Fl_Group* Advanced
      Tabs->end();
    } // Fl_Tabs* Tabs
    CDASClient->end();
  } // Fl_Double_Window* CDASClient
}

void fltkClientUI::show(int argc, char **argv) {
  Address->value("localhost");
  Port->value("30000");
  CameraType->add("SBIG USB",0,0,0,0);
  CameraType->add("PVCAM",0,0,0,0);
  CameraType->add("ANDOR",0,0,0,0);
  CameraType->add("FLI PROLINE", 0,0,0,0);
  FilterWheelType->add("SBIG CFW-L",0,0,0,0);
  FilterWheelType->add("FLI CFW-1",0,0,0,0);
  FilterWheelType->add("KEO FW",0,0,0,0);
  CDASClient->show(argc, argv);
}
